## PARENT CONFIGURATION FILE

CMAKE_MINIMUM_REQUIRED( VERSION 2.8 )

SET( 
  PROJECT_NAME CBICATk # change this for branches, etc.
  #VERSION 0.0.2 
  ) # change project name here

PROJECT( ${PROJECT_NAME} )
SET(PROJECT_NAME_EXTENDED "CBICA Toolkit")
ADD_DEFINITIONS(-DPROJECT_NAME_EXTENDED="${PROJECT_NAME_EXTENDED}")
ADD_DEFINITIONS(-DPROJECT_NAME="${PROJECT_NAME}")
SET( PROJECT_VERSION_MAJOR 1)
SET( PROJECT_VERSION_MINOR 0)
SET( PROJECT_VERSION_PATCH 0)
SET( PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
ADD_DEFINITIONS(-DPROJECT_VERSION="${PROJECT_VERSION}")
SET(PROJECT_VENDOR "CBICA - UPenn")
SET(LICENSE_FILE "${PROJECT_SOURCE_DIR}/licenses/COPYING.txt")
SET(README_FILE  "${PROJECT_SOURCE_DIR}/README.txt")
SET(PROJECT_DOMAIN "https://www.cbica.upenn.edu/sbia/software/")
SET(PROJECT_CONTACT "software@cbica.upenn.edu")

# ensure OpenMP flag is enabled throughout the project 
FIND_PACKAGE(OpenMP REQUIRED)

SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )

# Find all *.h and *.cpp files in a folder -> useful when the application is purely command line based
SET( SOURCE_DIRECTORY ${PROJECT_SOURCE_DIR}/src )
SET( BASIC_CLASS_DIRECTORY ${SOURCE_DIRECTORY}/classes )
SET( THIRDPARTY_LIB_PATH ${SOURCE_DIRECTORY}/thirdparty )
INCLUDE_DIRECTORIES( ${THIRDPARTY_LIB_PATH} )

# macro to find all sub-directories 
MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children 
    RELATIVE ${curdir} ${curdir}/* 
    PATTERN "svn" EXCLUDE
  )
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

# find and include all third party libraries
SUBDIRLIST(SUBDIRECTORIES ${THIRDPARTY_LIB_PATH})

FOREACH(thirdParty_include ${SUBDIRECTORIES})
  INCLUDE_DIRECTORIES( ${THIRDPARTY_LIB_PATH}/${thirdParty_include} )
  #SUBDIRLIST(SUBDIRECTORIES_INT ${THIRDPARTY_LIB_PATH})
  #FOREACH(thirdParty_int_include ${THIRDPARTY_LIB_PATH}/${thirdParty_include})
  #  INCLUDE_DIRECTORIES( ${THIRDPARTY_LIB_PATH}/${thirdParty_include}/${thirdParty_int_include} )
  #ENDFOREACH()
ENDFOREACH()

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

## Do you want to build the ITK classes as well?
SET( BUILD_CBICA_ITK_CLASSES ON CACHE BOOL "Do you want to build the CBICA ITK classes (needs ITK 4.10.0+)?" )
IF( BUILD_CBICA_ITK_CLASSES )
  ADD_DEFINITIONS( -DBUILD_CBICA_ITK_CLASSES=1 )
ELSE()
  ADD_DEFINITIONS( -DBUILD_CBICA_ITK_CLASSES=0 )
ENDIF()

IF( BUILD_CBICA_ITK_CLASSES )

	#ADD_DEFINITIONS( -DBUILD_CBICA_ITK=1 )	
	FIND_PACKAGE( ITK REQUIRED )
  INCLUDE("${ITK_USE_FILE}")
  SET(ITK_FOUND ON CACHE BOOL "ITK was found" )
  ADD_DEFINITIONS(-DITK_FOUND=${ITK_FOUND})
	#SET( ITK_CLASS_DIRECTORY ${SOURCE_DIRECTORY}/classes/itk )
  #ADD_SUBDIRECTORY( ${SOURCE_DIRECTORY}/classes/itk )
	# Done for temporary testing
	#FILE( GLOB CBICAITKSources
	#    "${ITK_CLASS_DIRECTORY}/*.h"
	#    "${ITK_CLASS_DIRECTORY}/*.cpp"
	#)
  
  #SET( MainSources ${MainSources} ${ITK_Class_Headers} ${ITK_Class_Sources} )

ENDIF( BUILD_CBICA_ITK_CLASSES ) 

## Do you want to build the OpenCV classes as well?
SET( BUILD_CBICA_OPENCV_CLASSES ON CACHE BOOL "Do you want to build the CBICA OpenCV classes (needs OpenCV 3.0+)?" )
IF( BUILD_CBICA_OPENCV_CLASSES )
  ADD_DEFINITIONS( -BUILD_CBICA_OPENCV_CLASSES=1 )
ELSE()
  ADD_DEFINITIONS( -BUILD_CBICA_OPENCV_CLASSES=0 )
ENDIF()

IF( BUILD_CBICA_OPENCV_CLASSES )

	#ADD_DEFINITIONS( -DBUILD_CBICA_ITK=1 )	
	FIND_PACKAGE( OpenCV 3.0 REQUIRED )
  INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
  
ENDIF( BUILD_CBICA_OPENCV_CLASSES ) 

# add c++11 flag if it is GCC v<5
IF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
    INCLUDE( CheckCXXCompilerFlag )
    CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
    CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    IF( COMPILER_SUPPORTS_CXX11 )
    	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    elseif(COMPILER_SUPPORTS_CXX0X )
    	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    else()
    	MESSAGE(ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif()
  ENDIF()
ENDIF() 

ADD_SUBDIRECTORY( ${BASIC_CLASS_DIRECTORY} )

ADD_SUBDIRECTORY( ${SOURCE_DIRECTORY} )

FIND_PACKAGE(OpenMP REQUIRED)
SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )

# Done for temporary testing
FILE( GLOB 
  MainSources
  "${SOURCE_DIRECTORY}/*.h"
  "${SOURCE_DIRECTORY}/*.cpp"
  "${BASIC_CLASS_DIRECTORY}/*.h"
  "${BASIC_CLASS_DIRECTORY}/*.cpp"
)

# If Windows is detected, add getopt for command line parsing. Will be deprecated in favor of cbica::CmdParser
IF( WIN32 )
	SET( MainSources
		${MainSources}
		${SOURCE_DIRECTORY}/windows/getopt.h
		${SOURCE_DIRECTORY}/windows/getopt.cpp
		${SOURCE_DIRECTORY}/windows/dirent.h
	)
ENDIF( WIN32 )

SET( INCLUDE_DIR_CONFIG "\"${PROJECT_SOURCE_DIR}/src/classes\"" )
#GET_TARGET_PROPERTY( LIBRARY_CONFIG CBICA_Classes LOCATION )
SET( LIBRARY_CONFIG "\"${LIBRARY_CONFIG}\"" )

# Building the documentation
SET( BUILD_DOCUMENTATION ON CACHE BOOL "Do you want to build Documentation (needs Doxygen)?" )
IF( BUILD_DOCUMENTATION )
  ADD_SUBDIRECTORY( docs )
  #ADD_SUBDIRECTORY( docs_internal ) # only used for internal documentation 
ENDIF ()

### Python wrapping
SET( BUILD_PYTHON_WRAP OFF CACHE BOOL "Do you want to wrap classes (needs SWIG 3.0.4)? Ensure build option matches Python lib build." )
IF( BUILD_PYTHON_WRAP )
  IF(WIN32)
    MESSAGE( STATUS "If Python has not been built on Debug mode (i.e., pythonXX_d.lib is NOT present), then only build library in Release." )
  ENDIF()
  ADD_SUBDIRECTORY( wrapping )
ENDIF ()

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}
	${BASIC_CLASS_DIRECTORY}
	${SOURCE_DIRECTORY}
    ${PROJECT_SOURCE_DIR}/src/thirdparty/yaml-cpp	
	#${Boost_INCLUDE_DIRS}
)

SET( EXE_NAME ${PROJECT_NAME} CACHE STRING "Executable name" FORCE)

SET( PACKAGE_NAME ${PROJECT_NAME} )

IF( WIN32 )
  SET( INSTALL_CONFIG_DIR "cmake" )
ELSE()
  SET( INSTALL_CONFIG_DIR "lib" )
ENDIF()

FILE( RELATIVE_PATH DIR "${CMAKE_INSTALL_PREFIX}/${INSTALL_CONFIG_DIR}" "${CMAKE_INSTALL_PREFIX}" )
STRING( REGEX REPLACE "/$|\\$" "" DIR "${DIR}" )

SET( INSTALL_DIR_CONFIG "${CMAKE_INSTALL_PREFIX}" CACHE INTERNAL "Install location")

#SET( INCLUDE_DIR_CONFIG "\"\${CMAKE_CURRENT_LIST_DIR}/include\"" )
SET( INCLUDE_DIR_CONFIG "\"${INSTALL_DIR_CONFIG}/include/\"" )
#GET_TARGET_PROPERTY( LIBRARY_CONFIG ${PROJECT_NAME} LOCATION )
GET_FILENAME_COMPONENT( LIBRARY_CONFIG "${LIBRARY_CONFIG}" NAME )
SET( LIBRARY_CONFIG "\"${INSTALL_DIR_CONFIG}/lib/${LIBRARY_CONFIG}\"" )

CONFIGURE_FILE( "config/Config.cmake.in" "${PROJECT_BINARY_DIR}/${PACKAGE_NAME}InstallConfig.cmake" @ONLY )
CONFIGURE_FILE( "config/Use.cmake.in" "${PROJECT_BINARY_DIR}/${PACKAGE_NAME}Use.cmake" @ONLY )
CONFIGURE_FILE( "config/ConfigVersion.cmake.in" "${PROJECT_BINARY_DIR}/${PACKAGE_NAME}ConfigVersion.cmake" @ONLY )

INSTALL(
  FILES       ${PROJECT_BINARY_DIR}/${PACKAGE_NAME}InstallConfig.cmake 
  DESTINATION ${INSTALL_DIR_CONFIG}
  RENAME      ${PACKAGE_NAME}Config.cmake
)

INSTALL(
  FILES       ${PROJECT_BINARY_DIR}/${PACKAGE_NAME}Use.cmake
  DESTINATION ${INSTALL_DIR_CONFIG}
)

INSTALL(
  FILES       ${PROJECT_BINARY_DIR}/${PACKAGE_NAME}ConfigVersion.cmake
  DESTINATION ${INSTALL_DIR_CONFIG}
)


## Build test(s)
SET( BUILD_TESTING TRUE CACHE BOOL "Build testing" )
IF( BUILD_TESTING )
	ENABLE_TESTING()
  INCLUDE(CTest)
ENDIF( BUILD_TESTING )
